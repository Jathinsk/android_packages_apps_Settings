diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 2c09722..fbcf6a6 100755
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -96,16 +96,48 @@
         <!-- Do not translate. -->
         <item>300000</item>
         <!-- Do not translate. -->
         <item>600000</item>
         <!-- Do not translate. -->
         <item>1800000</item>
     </string-array>
 
+    <!-- Pattern lock timeout settings  -->
+    <string-array name="pattern_lock_timeout_entries">
+        <item>No timeout</item>
+	<item>10 seconds</item>
+        <item>30 seconds</item>
+        <item>1 minute</item>
+        <item>2 minutes</item>
+        <item>5 minutes</item>
+        <item>10 minutes</item>
+        <item>20 minutes</item>
+    </string-array>
+
+    <!-- Do not translate. -->
+    <string-array name="pattern_lock_timeout_values" translatable="false">
+        <!-- Do not translate. -->
+        <item>0</item>
+        <!-- Do not translate. -->
+        <item>10000</item>
+        <!-- Do not translate. -->
+        <item>30000</item>
+        <!-- Do not translate. -->
+        <item>60000</item>
+        <!-- Do not translate. -->
+        <item>120000</item>
+        <!-- Do not translate. -->
+        <item>300000</item>
+        <!-- Do not translate. -->
+        <item>600000</item>
+        <!-- Do not translate. -->
+        <item>1200000</item>
+    </string-array>
+
     <!-- TTS settings -->
 
     <!-- Default speech rate choices -->
     <string-array name="tts_rate_entries">
         <item>Very slow</item>
         <item>Slow</item>
         <item>Normal</item>
         <item>Fast</item>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index ba8641d..3bc1c8d 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -1208,16 +1208,21 @@
     <string name="brightness_summary">Adjust the brightness of the screen</string>
     <!-- Sound & display settings screen, setting option name to change screen timeout -->
     <string name="screen_timeout">Screen timeout</string>
     <!-- Sound & display settings screen, setting option summary to change screen timeout -->
     <string name="screen_timeout_summary">Adjust the delay before the screen automatically turns off</string>
     <!-- Sound & display settings screen, setting option name to change whether the screen adjusts automatically based on lighting conditions -->
     <string name="automatic_brightness">Automatic brightness</string>
 
+    <!-- pattern lock timeout -->
+    <string name="pattern_lock_timeout">Lock timeout</string>
+    <!-- pattern lock timeout -->
+    <string name="pattern_lock_timeout_summary">Adjust the delay before the pattern lock activates after the screen is locked.</string>
+
     <!-- SIM lock settings title -->
     <string name="sim_lock_settings">SIM card lock settings</string>
     <!-- Security & location settings screen, setting option name -->
     <string name="sim_lock_settings_category">Set up SIM card lock</string>
     <!-- Security & location settings screen, section heading for settings related to sim card locking -->
     <string name="sim_lock_settings_title">SIM card lock</string>
     <!-- SIM card lock settings screen, setting check box label -->
     <string name="sim_pin_toggle">Lock SIM card</string>
diff --git a/res/xml/security_settings_pattern.xml b/res/xml/security_settings_pattern.xml
index 095828a..d690e1c 100644
--- a/res/xml/security_settings_pattern.xml
+++ b/res/xml/security_settings_pattern.xml
@@ -29,11 +29,19 @@
         <CheckBoxPreference
             android:key="visiblepattern"
             android:title="@string/lockpattern_settings_enable_visible_pattern_title"/>
 
         <CheckBoxPreference
             android:key="unlock_tactile_feedback"
             android:title="@string/lockpattern_settings_enable_tactile_feedback_title"/>
 
+	<ListPreference
+                android:key="pattern_lock_timeout"
+                android:title="@string/pattern_lock_timeout"
+                android:summary="@string/pattern_lock_timeout_summary"
+                android:persistent="false"
+                android:entries="@array/pattern_lock_timeout_entries"
+                android:entryValues="@array/pattern_lock_timeout_values" />
+
     </PreferenceCategory>
 
 </PreferenceScreen>
diff --git a/src/com/android/settings/ChooseLockPattern.java b/src/com/android/settings/ChooseLockPattern.java
index b5c0e80..c6a9e91 100644
--- a/src/com/android/settings/ChooseLockPattern.java
+++ b/src/com/android/settings/ChooseLockPattern.java
@@ -482,14 +482,15 @@ public class ChooseLockPattern extends Activity implements View.OnClickListener{
         final boolean lockVirgin = !utils.isPatternEverChosen();
 
         utils.saveLockPattern(mChosenPattern);
         utils.setLockPatternEnabled(true);
 
         if (lockVirgin) {
             utils.setVisiblePatternEnabled(true);
             utils.setTactileFeedbackEnabled(false);
+	    utils.setPatternLockTimeout(0); 
         }
 
         setResult(RESULT_FINISHED);
         finish();
     }
 }
diff --git a/src/com/android/settings/SecuritySettings.java b/src/com/android/settings/SecuritySettings.java
index 2723791..69ffb9b 100644
--- a/src/com/android/settings/SecuritySettings.java
+++ b/src/com/android/settings/SecuritySettings.java
@@ -28,16 +28,17 @@ import android.content.ContentResolver;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.database.Cursor;
 import android.location.LocationManager;
 import android.os.Bundle;
 import android.os.SystemProperties;
 import android.preference.CheckBoxPreference;
+import android.preference.ListPreference;
 import android.preference.Preference;
 import android.preference.PreferenceActivity;
 import android.preference.PreferenceCategory;
 import android.preference.PreferenceManager;
 import android.preference.PreferenceScreen;
 import android.provider.Settings;
 import android.security.Credentials;
 import android.security.KeyStore;
@@ -46,37 +47,41 @@ import android.view.View;
 import android.widget.TextView;
 import android.widget.Toast;
 
 import com.android.internal.widget.LockPatternUtils;
 
 /**
  * Gesture lock pattern settings.
  */
-public class SecuritySettings extends PreferenceActivity {
+public class SecuritySettings extends PreferenceActivity implements
+    Preference.OnPreferenceChangeListener {
 	
-	public static final String GPS_STATUS_CHANGED="com.android.settings.GPS_STATUS_CHANGED";
+    public static final String GPS_STATUS_CHANGED="com.android.settings.GPS_STATUS_CHANGED";
 	
     private static final String KEY_UNLOCK_SET_OR_CHANGE = "unlock_set_or_change";
 
     // Lock Settings
     private static final String PACKAGE = "com.android.settings";
     private static final String ICC_LOCK_SETTINGS = PACKAGE + ".IccLockSettings";
 
     private static final String KEY_LOCK_ENABLED = "lockenabled";
     private static final String KEY_VISIBLE_PATTERN = "visiblepattern";
     private static final String KEY_TACTILE_FEEDBACK_ENABLED = "unlock_tactile_feedback";
+    private static final String KEY_PATTERN_LOCK_TIMEOUT = "pattern_lock_timeout";
 
     // Encrypted File Systems constants
     private static final String PROPERTY_EFS_ENABLED = "persist.security.efs.enabled";
     private static final String PROPERTY_EFS_TRANSITION = "persist.security.efs.trans";
 
     private CheckBoxPreference mVisiblePattern;
     private CheckBoxPreference mTactileFeedback;
 
+    private ListPreference mPatternLockTimeOut;
+
     private CheckBoxPreference mShowPassword;
 
     // Location Settings
     private static final String LOCATION_NETWORK = "location_network";
     private static final String LOCATION_GPS = "location_gps";
     private static final String ASSISTED_GPS = "assisted_gps";
     private static final int SET_OR_CHANGE_LOCK_METHOD_REQUEST = 123;
 
@@ -163,16 +168,25 @@ public class SecuritySettings extends PreferenceActivity {
         // mSetOrChange = (PreferenceScreen) pm.findPreference(KEY_UNLOCK_SET_OR_CHANGE);
 
         // visible pattern
         mVisiblePattern = (CheckBoxPreference) pm.findPreference(KEY_VISIBLE_PATTERN);
 
         // tactile feedback. Should be common to all unlock preference screens.
         mTactileFeedback = (CheckBoxPreference) pm.findPreference(KEY_TACTILE_FEEDBACK_ENABLED);
 
+	// timeout for pattern lock
+	mPatternLockTimeOut = (ListPreference) pm.findPreference(KEY_PATTERN_LOCK_TIMEOUT);
+        if (mPatternLockTimeOut != null) 
+        {
+            if (mLockPatternUtils != null)
+	        mPatternLockTimeOut.setValue(String.valueOf( mLockPatternUtils.getPatternLockTimeout() ));
+	    mPatternLockTimeOut.setOnPreferenceChangeListener(this);
+        }
+
         int activePhoneType = TelephonyManager.getDefault().getPhoneType();
 
         // do not display SIM lock for CDMA phone
         if (TelephonyManager.PHONE_TYPE_CDMA != activePhoneType)
         {
             PreferenceScreen simLockPreferences = getPreferenceManager()
                     .createPreferenceScreen(this);
             simLockPreferences.setTitle(R.string.sim_lock_settings_category);
@@ -251,17 +265,20 @@ public class SecuritySettings extends PreferenceActivity {
             Intent intent = new Intent(this, ChooseLockGeneric.class);
             startActivityForResult(intent, SET_OR_CHANGE_LOCK_METHOD_REQUEST);
         } else if (KEY_LOCK_ENABLED.equals(key)) {
             lockPatternUtils.setLockPatternEnabled(isToggled(preference));
         } else if (KEY_VISIBLE_PATTERN.equals(key)) {
             lockPatternUtils.setVisiblePatternEnabled(isToggled(preference));
         } else if (KEY_TACTILE_FEEDBACK_ENABLED.equals(key)) {
             lockPatternUtils.setTactileFeedbackEnabled(isToggled(preference));
-        } else if (preference == mShowPassword) {
+        } else if (KEY_PATTERN_LOCK_TIMEOUT.equals(key)) {
+//		int value = Integer.parseInt((String) ((ListPreference)preference).getValue());
+//		lockPatternUtils.setPatternLockTimeout(value);	
+	} else if (preference == mShowPassword) {
             Settings.System.putInt(getContentResolver(), Settings.System.TEXT_SHOW_PASSWORD,
                     mShowPassword.isChecked() ? 1 : 0);
         } else if (preference == mNetwork) {
             Settings.Secure.setLocationProviderEnabled(getContentResolver(),
                     LocationManager.NETWORK_PROVIDER, mNetwork.isChecked());
         } else if (preference == mGps) {
             boolean enabled = mGps.isChecked();
             Settings.Secure.setLocationProviderEnabled(getContentResolver(),
@@ -654,9 +671,21 @@ public class SecuritySettings extends PreferenceActivity {
             } else {
                 builder.setMessage(R.string.encrypted_fs_disable_dialog)
                         .setPositiveButton(R.string.encrypted_fs_disable_button, this)
                         .setNegativeButton(R.string.encrypted_fs_cancel_button, this)
                         .create().show();
             }
         }
     }
+
+    public boolean onPreferenceChange(Preference preference, Object objValue) {
+        final String key = preference.getKey();
+        final LockPatternUtils lockPatternUtils = mChooseLockSettingsHelper.utils();
+
+	if (KEY_PATTERN_LOCK_TIMEOUT.equals(key)) {
+		int value = Integer.parseInt((String) objValue);
+		lockPatternUtils.setPatternLockTimeout(value);	
+	}
+        return true;
+    }
+
 }
